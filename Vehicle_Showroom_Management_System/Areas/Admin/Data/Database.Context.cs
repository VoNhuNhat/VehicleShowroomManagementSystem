//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vehicle_Showroom_Management_System.Areas.Admin.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Vehicle_Showroom_Management_SystemEntities : DbContext
    {
        public Vehicle_Showroom_Management_SystemEntities()
            : base("name=Vehicle_Showroom_Management_SystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<ModelCar> ModelCars { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
    
        public virtual int Insert_UserAccount(string fullName, string userName, string password, string address, string email, string phoneNumber, Nullable<System.DateTime> birthday)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_UserAccount", fullNameParameter, userNameParameter, passwordParameter, addressParameter, emailParameter, phoneNumberParameter, birthdayParameter);
        }
    
        public virtual int Update_UserAccount(Nullable<int> userId, string fullName, string userName, string password, string address, string email, string phoneNumber, Nullable<System.DateTime> birthday)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_UserAccount", userIdParameter, fullNameParameter, userNameParameter, passwordParameter, addressParameter, emailParameter, phoneNumberParameter, birthdayParameter);
        }
    
        public virtual int Insert_Brand(string brandName, string image)
        {
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Brand", brandNameParameter, imageParameter);
        }
    
        public virtual int Update_Brand(Nullable<int> brandId, string brandName, string image)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Brand", brandIdParameter, brandNameParameter, imageParameter);
        }
    
        public virtual int Insert_Customer(Nullable<int> userId, string fullName, string address, string email, string phone, Nullable<System.DateTime> birthday)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Customer", userIdParameter, fullNameParameter, addressParameter, emailParameter, phoneParameter, birthdayParameter);
        }
    
        public virtual int Update_Customer(Nullable<int> customerId, string fullName, string address, string email, string phone, Nullable<System.DateTime> birthday)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Customer", customerIdParameter, fullNameParameter, addressParameter, emailParameter, phoneParameter, birthdayParameter);
        }
    
        public virtual int Insert_ModeCar(string modelCarName, Nullable<int> brandId)
        {
            var modelCarNameParameter = modelCarName != null ?
                new ObjectParameter("ModelCarName", modelCarName) :
                new ObjectParameter("ModelCarName", typeof(string));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_ModeCar", modelCarNameParameter, brandIdParameter);
        }
    
        public virtual int Insert_Car(string modelNumberCar, Nullable<int> purchaseOrderId, string carName, Nullable<double> priceInput, Nullable<double> priceOutput, Nullable<int> seatQuantity, string color, string gearbox, string engine, Nullable<double> fuelConsumption, Nullable<double> kilometerGone, Nullable<int> status, Nullable<int> checking, Nullable<System.DateTime> purchaseOrderDate)
        {
            var modelNumberCarParameter = modelNumberCar != null ?
                new ObjectParameter("ModelNumberCar", modelNumberCar) :
                new ObjectParameter("ModelNumberCar", typeof(string));
    
            var purchaseOrderIdParameter = purchaseOrderId.HasValue ?
                new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
                new ObjectParameter("PurchaseOrderId", typeof(int));
    
            var carNameParameter = carName != null ?
                new ObjectParameter("CarName", carName) :
                new ObjectParameter("CarName", typeof(string));
    
            var priceInputParameter = priceInput.HasValue ?
                new ObjectParameter("PriceInput", priceInput) :
                new ObjectParameter("PriceInput", typeof(double));
    
            var priceOutputParameter = priceOutput.HasValue ?
                new ObjectParameter("PriceOutput", priceOutput) :
                new ObjectParameter("PriceOutput", typeof(double));
    
            var seatQuantityParameter = seatQuantity.HasValue ?
                new ObjectParameter("SeatQuantity", seatQuantity) :
                new ObjectParameter("SeatQuantity", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var gearboxParameter = gearbox != null ?
                new ObjectParameter("Gearbox", gearbox) :
                new ObjectParameter("Gearbox", typeof(string));
    
            var engineParameter = engine != null ?
                new ObjectParameter("Engine", engine) :
                new ObjectParameter("Engine", typeof(string));
    
            var fuelConsumptionParameter = fuelConsumption.HasValue ?
                new ObjectParameter("FuelConsumption", fuelConsumption) :
                new ObjectParameter("FuelConsumption", typeof(double));
    
            var kilometerGoneParameter = kilometerGone.HasValue ?
                new ObjectParameter("KilometerGone", kilometerGone) :
                new ObjectParameter("KilometerGone", typeof(double));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var checkingParameter = checking.HasValue ?
                new ObjectParameter("Checking", checking) :
                new ObjectParameter("Checking", typeof(int));
    
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Car", modelNumberCarParameter, purchaseOrderIdParameter, carNameParameter, priceInputParameter, priceOutputParameter, seatQuantityParameter, colorParameter, gearboxParameter, engineParameter, fuelConsumptionParameter, kilometerGoneParameter, statusParameter, checkingParameter, purchaseOrderDateParameter);
        }
    
        public virtual int Insert_PurchaseOrder(string purchaseOrderId, Nullable<int> modelCarId, Nullable<int> quantityCarImport, Nullable<System.DateTime> orderDate)
        {
            var purchaseOrderIdParameter = purchaseOrderId != null ?
                new ObjectParameter("PurchaseOrderId", purchaseOrderId) :
                new ObjectParameter("PurchaseOrderId", typeof(string));
    
            var modelCarIdParameter = modelCarId.HasValue ?
                new ObjectParameter("ModelCarId", modelCarId) :
                new ObjectParameter("ModelCarId", typeof(int));
    
            var quantityCarImportParameter = quantityCarImport.HasValue ?
                new ObjectParameter("QuantityCarImport", quantityCarImport) :
                new ObjectParameter("QuantityCarImport", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PurchaseOrder", purchaseOrderIdParameter, modelCarIdParameter, quantityCarImportParameter, orderDateParameter);
        }
    }
}
